PROGRAM Prog1
(* Config for AWT *)
input.Channel:=5;
input.Length:=9;
input.Cancel:=false;
(* Config for ARD *)
readinput.Channel:=5;
readinput.Length:=8;
readinput.Cancel:=false;
(* Config for ACB *)
input_acb.Channel:=5;
input_acb.TriggerType:=1;
(* Config for ACL *)
input_acl.Channel:=5;
input_acl.RXBuffer:=TRUE;

motorA_move_lower := ANY_TO_BYTE(AND_MASK(motorA_move,16#FF));
motorA_move_upper := ANY_TO_BYTE(AND_MASK((SHR(motorA_move,8)),16#FF));

motorB_move_lower := ANY_TO_BYTE(AND_MASK(motorB_move,16#FF));
motorB_move_upper := ANY_TO_BYTE(AND_MASK((SHR(motorB_move,8)),16#FF));

motorA_move_to_lower := ANY_TO_BYTE(AND_MASK(motorA_move_to,16#FF));
motorA_move_to_upper := ANY_TO_BYTE(AND_MASK((SHR(motorA_move_to,8)),16#FF));

motorB_move_to_lower := ANY_TO_BYTE(AND_MASK(motorB_move_to,16#FF));
motorB_move_to_upper := ANY_TO_BYTE(AND_MASK((SHR(motorB_move_to,8)),16#FF));

CASE SendCmd OF
	1:
		(* Motor A Forward *)
		CommandTest[1]:=16#55;
		CommandTest[2]:=16#FF;
		CommandTest[3]:=16#01;
		CommandTest[4]:=motorA_move_lower;
		CommandTest[5]:=motorA_move_upper;
		CommandTest[6]:=16#00;
		CommandTest[7]:=16#00;
		CommandTest[8]:=16#00;
		CommandTest[9]:=16#00;
	2:
		(* Motor A BW*)
		CommandTest[1]:=16#55;
		CommandTest[2]:=16#FF;
		CommandTest[3]:=16#02;
		CommandTest[4]:= motorA_move_lower;
		CommandTest[5]:= motorA_move_upper;
		CommandTest[6]:=16#00;
		CommandTest[7]:=16#00;
		CommandTest[8]:=16#00;
		CommandTest[9]:=16#00;
	3:
		(* Motor A Stop *)
		CommandTest[1]:=16#55;
		CommandTest[2]:=16#FF;
		CommandTest[3]:=16#03;
		CommandTest[4]:=16#00;
		CommandTest[5]:=16#00;
		CommandTest[6]:=16#00;
		CommandTest[7]:=16#00;
		CommandTest[8]:=16#00;
		CommandTest[9]:=16#00;
	4:
		(* Motor B Forward *)
		CommandTest[1]:=16#55;
		CommandTest[2]:=16#FF;
		CommandTest[3]:=16#04;
		CommandTest[4]:=motorB_move_lower;
		CommandTest[5]:=motorB_move_upper;
		CommandTest[6]:=16#00;
		CommandTest[7]:=16#00;
		CommandTest[8]:=16#00;
		CommandTest[9]:=16#00;
	5:
		(* Motor B BW *)
		CommandTest[1]:=16#55;
		CommandTest[2]:=16#FF;
		CommandTest[3]:=16#05;
		CommandTest[4]:=motorB_move_lower;
		CommandTest[5]:=motorB_move_upper;
		CommandTest[6]:=16#00;
		CommandTest[7]:=16#00;
		CommandTest[8]:=16#00;
		CommandTest[9]:=16#00;
	6:
		(* Motor B Stop *)
		CommandTest[1]:=16#55;
		CommandTest[2]:=16#FF;
		CommandTest[3]:=16#06;
		CommandTest[4]:=16#00;
		CommandTest[5]:=16#00;
		CommandTest[6]:=16#00;
		CommandTest[7]:=16#00;
		CommandTest[8]:=16#00;
		CommandTest[9]:=16#00;
	7:
		(* ReadCounts *)
		CommandTest[1]:=16#55;
		CommandTest[2]:=16#FF;
		CommandTest[3]:=16#07;
		CommandTest[4]:=16#00;
		CommandTest[5]:=16#00;
		CommandTest[6]:=16#00;
		CommandTest[7]:=16#00;
		CommandTest[8]:=16#00;
		CommandTest[9]:=16#00;
	8:
		(* Motor A Move To Position *)
		CommandTest[1]:=16#55;
		CommandTest[2]:=16#FF;
		CommandTest[3]:=16#08;
		CommandTest[4]:=motorA_move_to_lower;
		CommandTest[5]:=motorA_move_to_upper;
		CommandTest[6]:=16#00;
		CommandTest[7]:=16#00;
		CommandTest[8]:=16#00;
		CommandTest[9]:=16#00;
	9:
		(* Motor B Move To Position *)
		CommandTest[1]:=16#55;
		CommandTest[2]:=16#FF;
		CommandTest[3]:=16#09;
		CommandTest[4]:=motorB_move_to_lower;
		CommandTest[5]:=motorB_move_to_upper;
		CommandTest[6]:=16#00;
		CommandTest[7]:=16#00;
		CommandTest[8]:=16#00;
		CommandTest[9]:=16#00;
	10:
		(* Motor A & B Move To Position *)
		CommandTest[1]:=16#55;
		CommandTest[2]:=16#FF;
		CommandTest[3]:=16#09;
		CommandTest[4]:=motorA_move_to_lower;
		CommandTest[5]:=motorA_move_to_upper;
		CommandTest[6]:=motorB_move_to_lower;
		CommandTest[7]:=motorB_move_to_upper;
		CommandTest[8]:=16#00;
		CommandTest[9]:=16#00;
ELSE
		CommandTest[1]:=16#00;
		CommandTest[2]:=16#00;
		CommandTest[3]:=16#00;
		CommandTest[4]:=16#00;
		CommandTest[5]:=16#00;
		CommandTest[6]:=16#00;
		CommandTest[7]:=16#00;
		CommandTest[8]:=16#00;
		CommandTest[9]:=16#00;
		Start_COP:=FALSE;
		Start_CRC:=FALSE;
		Start_GenBytes:=FALSE;
END_CASE;

COP_Special_1(CommandTest,Start_COP);
Start_COP:=TRUE;
Generate_CRC_1(COP_Special_1.output,Start_CRC);
Start_CRC:=TRUE;
Generate_Bytes_1(Generate_CRC_1.output,Start_GenBytes);
Start_GenBytes:=TRUE;
CommandTest[8]:=Generate_Bytes_1.upper_byte;
CommandTest[9]:=Generate_Bytes_1.lower_byte;


if(SendCmd<11) AND SendCmd<>0 THEN
	sendCommand:=True;
END_IF;

source:=CommandTest;

(* AWT - Sends command to PIC *)
AWT_1(sendCommand,input,source);
sendCommand:=False;
SendCmd:=0;
num:=AWT_1.NumChar;
error:=AWT_1.Error;
id:=AWT_1.ErrorID;


(* ACB - Reads buffer *)
ACB_1(TRUE, input_acb);
(* Checks buffer = 8 char before reading *)
if(ACB_1.Characters=8) THEN
ReadTest:=True;
ELSE
END_IF;

(* ARD - Read Motor Counts, this runs when Read_counts is TRUE*)
ARD_1(ReadTest, readinput);
ReadTest:=False;
errorid2 := ard_1.ErrorID;
des := ARD_1.Destination;
error2 := ARD_1.Error;
num2 := ard_1.NumChar;

(* ACL - Clears buffer, currently not used *)
ACL_1(clear_buffer,input_acl);

(* Adds 2 bytes to get the motor counts *)
motorA_Count :=  OR_MASK(( SHL(ANY_TO_DINT(des[4]),24)),OR_MASK(( SHL(ANY_TO_DINT(des[3]),16)),OR_MASK(( SHL(ANY_TO_DINT(des[2]),8)),ANY_TO_DINT(des[1]))));
motorB_Count :=  OR_MASK(( SHL(ANY_TO_DINT(des[8]),24)),OR_MASK(( SHL(ANY_TO_DINT(des[7]),16)),OR_MASK(( SHL(ANY_TO_DINT(des[6]),8)),ANY_TO_DINT(des[5]))));
(*motorB_Count :=  OR_MASK(( SHL(ANY_TO_DINT(des[4]),8)),ANY_TO_DINT(des[3]));*)

(* Auto Reset Timer - Not used *)
TON_1(reset,T#100ms);
reset:=NOT TON_1.Q;

END_PROGRAM